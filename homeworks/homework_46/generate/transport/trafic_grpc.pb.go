// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: trafic.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranportServiceClient is the client API for TranportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranportServiceClient interface {
	GetBusSchedule(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (*BusScheduleRespons, error)
	TrackBusLocation(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (*TrucLocation, error)
	ReportTraficJam(ctx context.Context, in *TrucLocation, opts ...grpc.CallOption) (*TraficJamRespons, error)
}

type tranportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranportServiceClient(cc grpc.ClientConnInterface) TranportServiceClient {
	return &tranportServiceClient{cc}
}

func (c *tranportServiceClient) GetBusSchedule(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (*BusScheduleRespons, error) {
	out := new(BusScheduleRespons)
	err := c.cc.Invoke(ctx, "/tranport_service.TranportService/GetBusSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tranportServiceClient) TrackBusLocation(ctx context.Context, in *BusRequest, opts ...grpc.CallOption) (*TrucLocation, error) {
	out := new(TrucLocation)
	err := c.cc.Invoke(ctx, "/tranport_service.TranportService/TrackBusLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tranportServiceClient) ReportTraficJam(ctx context.Context, in *TrucLocation, opts ...grpc.CallOption) (*TraficJamRespons, error) {
	out := new(TraficJamRespons)
	err := c.cc.Invoke(ctx, "/tranport_service.TranportService/ReportTraficJam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranportServiceServer is the server API for TranportService service.
// All implementations must embed UnimplementedTranportServiceServer
// for forward compatibility
type TranportServiceServer interface {
	GetBusSchedule(context.Context, *BusRequest) (*BusScheduleRespons, error)
	TrackBusLocation(context.Context, *BusRequest) (*TrucLocation, error)
	ReportTraficJam(context.Context, *TrucLocation) (*TraficJamRespons, error)
	mustEmbedUnimplementedTranportServiceServer()
}

// UnimplementedTranportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranportServiceServer struct {
}

func (UnimplementedTranportServiceServer) GetBusSchedule(context.Context, *BusRequest) (*BusScheduleRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusSchedule not implemented")
}
func (UnimplementedTranportServiceServer) TrackBusLocation(context.Context, *BusRequest) (*TrucLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackBusLocation not implemented")
}
func (UnimplementedTranportServiceServer) ReportTraficJam(context.Context, *TrucLocation) (*TraficJamRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTraficJam not implemented")
}
func (UnimplementedTranportServiceServer) mustEmbedUnimplementedTranportServiceServer() {}

// UnsafeTranportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranportServiceServer will
// result in compilation errors.
type UnsafeTranportServiceServer interface {
	mustEmbedUnimplementedTranportServiceServer()
}

func RegisterTranportServiceServer(s grpc.ServiceRegistrar, srv TranportServiceServer) {
	s.RegisterService(&TranportService_ServiceDesc, srv)
}

func _TranportService_GetBusSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranportServiceServer).GetBusSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tranport_service.TranportService/GetBusSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranportServiceServer).GetBusSchedule(ctx, req.(*BusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranportService_TrackBusLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranportServiceServer).TrackBusLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tranport_service.TranportService/TrackBusLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranportServiceServer).TrackBusLocation(ctx, req.(*BusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranportService_ReportTraficJam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrucLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranportServiceServer).ReportTraficJam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tranport_service.TranportService/ReportTraficJam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranportServiceServer).ReportTraficJam(ctx, req.(*TrucLocation))
	}
	return interceptor(ctx, in, info, handler)
}

// TranportService_ServiceDesc is the grpc.ServiceDesc for TranportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tranport_service.TranportService",
	HandlerType: (*TranportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusSchedule",
			Handler:    _TranportService_GetBusSchedule_Handler,
		},
		{
			MethodName: "TrackBusLocation",
			Handler:    _TranportService_TrackBusLocation_Handler,
		},
		{
			MethodName: "ReportTraficJam",
			Handler:    _TranportService_ReportTraficJam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trafic.proto",
}
